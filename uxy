#!/usr/bin/python3

#  Copyright (c) 2019 Martin Sustrik
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
#  IN THE SOFTWARE.

import argparse
import csv
import io
import json
import re
import subprocess
import sys
import unicodedata
import yaml


def trim_newline(s):
  if s.endswith('\n'):
    return s[:-1]
  return s


ESCAPE_SEQUENCES1 = {
  't':  '\t',
  'n':  '\n',
  '"':  '"',
  '\\': '\\',
}


ESCAPE_SEQUENCES2 = {
  '\t':  't',
  '\n':  'n',
  '"':  '"',
  '\\': '\\',
}


# Convert uxy field into a string.
def decode_field(s):
  # Replace control characters by question marks.
  s = "".join((c if unicodedata.category(c)[0] != "C" else '?') for c in s)
  if not (s.startswith('"') and s.endswith('"')):
    return s
  # Quoted field.
  s = s[1:-1]
  # Exapnd escape sequences.
  f = ""
  j = 0
  while j < len(s):
    if s[j] == '\\':
      if j + 1 >= len(s):
        f += "?"
        j += 1;
        continue
      if s[j + 1] not in ESCAPE_SEQUENCES1:
        f += "?"
        j += 2
        continue
      f += ESCAPE_SEQUENCES1[s[j + 1]]
      j += 2
      continue
    f += s[j]
    j += 1
  return f


# Convert arbitrary string into a uxy field.
def encode_field(s):
  # Check whether the string contains any special characters.
  special = False
  if '"' in s or ' ' in s:
    special = True
  else:
    for c in s:
      if unicodedata.category(c)[0] == "C":
        special = True
        break
  if not special:
    return s
  # Quoted field is needed.
  f = '"'
  for c in s:
    if c in ESCAPE_SEQUENCES2:
      f += ESCAPE_SEQUENCES2[c]
      continue
    f += c
  return f + '"'

UNQUOTED = 1
QUOTED = 2
ESCAPE = 3
TRAILING = 4

# Given a line, this function splits it into individual uxy fields and field widths.
def split_fields_widths(s):
  fields = []
  widths = []
  state = TRAILING
  field = ""
  width = 0
  for c in s:
    if state == UNQUOTED:
      if c == ' ':
        width += 1
        state = TRAILING
      else:
        field += c
        width += 1
    elif state == QUOTED:
      if c == "\\":
        field += c
        width += 1
        state = ESCAPE
      elif c == '"':
        field += c
        width += 1
        state = TRAILING
      else:
        field += c
        width += 1      
    elif state == ESCAPE:
      field += c
      width += 1
      state = QUOTED
    elif state == TRAILING:
      if c == " ":
        width += 1
      else:
        if len(field) > 0:
          fields.append(field)
          widths.append(width)
        field = c
        width = 1
        if c == '"':
          state = QUOTED
        else:
          state = UNQUOTED
  if len(field) > 0:
    fields.append(field)
    widths.append(width)
  return (fields, widths)


# Given a line, this function splits it into individual uxy fields.
def split_fields(s):
  fields, _ = split_fields_widths(s)
  return fields


class Format:

  # Create a format from a list of fields.
  # The values of the fields will be used as column names.
  def __init__(self, fmt):
    self.fields, self.widths = split_fields_widths(fmt)

  # Adjust the format so that the fields fit in.
  def adjust(self, fields):
    for i in range(0, len(fields)):
       self.widths[i] = max(self.widths[i], len(fields[i]) + 1)

  # Renders the supplied fields according to the format.
  # If fields is None, it renders the header itself.
  def render(self, fields=None):
    if fields == None:
      fields = self.fields
    broken = False
    res = ""
    for i in range(0, len(fields)):
      if broken or len(fields[i]) + 1 > self.widths[i]:
        broken = True
        res += fields[i] + " "
      else:
        res += fields[i] + " " * (self.widths[i] - len(fields[i]))
    return res + "\n"


def uxy_cmd_re(args):
  # Use the supplied format.
  fmt = Format(args.header)
  sys.stdout.write(fmt.render())
  # Parse the data.
  regexp = re.compile(args.regexp)
  for ln in sys.stdin:
    m = regexp.match(trim_newline(ln))
    # Non-matching lines are ignored.
    if not m:
      continue
    fields = []
    for i in range(1, regexp.groups + 1):
      fields.append(encode_field(m.group(i)))
    sys.stdout.write(fmt.render(fields))


def uxy_cmd_align(args):
  s = trim_newline(sys.stdin.readline())
  fmt = Format(s)
  records = []
  for ln in sys.stdin:
    fields = split_fields(trim_newline(ln))
    fmt.adjust(fields)
    records.append(fields)
  sys.stdout.write(fmt.render())
  for r in records:
    sys.stdout.write(fmt.render(r))


def uxy_cmd_reformat(args):
  # Use the supplied format.
  fmt = Format(args.header)
  newhdr = split_fields(args.header)
  sys.stdout.write(fmt.render())
  # Read the old format.
  s = trim_newline(sys.stdin.readline())
  oldhdr = split_fields(s)
  # Process the data.
  for ln in sys.stdin:
    oldfields = split_fields(trim_newline(ln))
    newfields = ['""'] * len(newhdr)
    for i in range(0, len(oldfields)):
      if i >= len(oldhdr):
        break
      oldname = oldhdr[i]
      if oldname not in newhdr:
        continue
      newfields[newhdr.index(oldname)] = oldfields[i]
    sys.stdout.write(fmt.render(newfields))
        

def uxy_cmd_from_json(args):
  # Read the entire input.
  s = ""
  for ln in sys.stdin:
    s += ln
  root = json.loads(s)
  # Normalize the JSON. Collect the field names along the way.
  fields = {}
  if not isinstance(root, list):
    root = [root]
  for i in range(0, len(root)):
    if not isinstance(root[i], dict):
      root[i] = {"COL1": root[i]}
    for k, _ in root[i].items():
      fields[k] = None
  # Fields will go to the output in alphabetical order.
  fields = sorted(fields)
  # Collect the data. At the same time adjust the format sa that data fit in.
  fmt = Format(" ".join([encode_field(f) for f in fields]))
  records = []
  for i in range(0, len(root)):
    record = []
    for f in fields:
      if f in root[i]:
        record.append(encode_field(str(root[i][f])))
      else:
        record.append('""')
    fmt.adjust(record)
    records.append(record)
  # Write the result to output.
  sys.stdout.write(fmt.render())
  for r in records:
    sys.stdout.write(fmt.render(r))


def uxy_cmd_to_json(args):
  s = trim_newline(sys.stdin.readline())
  hdr = split_fields(s)
  res = []
  for ln in sys.stdin:
    fields = split_fields(trim_newline(ln))
    item = {}
    for i in range(0, len(fields)):
      item[decode_field(hdr[i])] = decode_field(fields[i])
    res.append(item)
  sys.stdout.write(json.dumps(res, indent=4) + "\n")


def uxy_cmd_from_yaml(args):
  # Read the entire input.
  s = ""
  for ln in sys.stdin:
    s += ln
  root = yaml.load(s)
  # Normalize the dict. Collect the field names along the way.
  fields = {}
  if not isinstance(root, list):
    root = [root]
  for i in range(0, len(root)):
    if not isinstance(root[i], dict):
      root[i] = {"COL1": root[i]}
    for k, _ in root[i].items():
      fields[k] = None
  # Fields will go to the output in alphabetical order.
  fields = sorted(fields)
  # Collect the data. At the same time adjust the format sa that data fit in.
  fmt = Format(" ".join([encode_field(f) for f in fields]))
  records = []
  for i in range(0, len(root)):
    record = []
    for f in fields:
      if f in root[i]:
        record.append(encode_field(str(root[i][f])))
      else:
        record.append('""')
    fmt.adjust(record)
    records.append(record)
  # Write the result to output.
  sys.stdout.write(fmt.render())
  for r in records:
    sys.stdout.write(fmt.render(r))


def uxy_cmd_to_yaml(args):
  s = trim_newline(sys.stdin.readline())
  hdr = split_fields(s)
  res = []
  for ln in sys.stdin:
    fields = split_fields(trim_newline(ln))
    item = {}
    for i in range(0, len(fields)):
      item[decode_field(hdr[i])] = decode_field(fields[i])
    res.append(item)
  sys.stdout.write(yaml.dump(res, default_flow_style=False))


def uxy_cmd_from_csv(args):
  # Read the headers
  ln = trim_newline(sys.stdin.readline())
  r = csv.reader(io.StringIO(ln))
  for fields in r:
    fields = " ".join([encode_field(f) for f in fields])
    fmt = Format(fields)
    sys.stdout.write(fields + "\n")
  for ln in sys.stdin:
    r = csv.reader(io.StringIO(trim_newline(ln)))
    for fields in r:
      fields = [encode_field(f) for f in fields]
      sys.stdout.write(fmt.render(fields))
    

def uxy_cmd_to_csv(args):
  for ln in sys.stdin:
    fields = split_fields(trim_newline(ln))
    fields = [decode_field(f) for f in fields]
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(fields)
    sys.stdout.write(buf.getvalue())
    #print(fields)


def uxy_cmd_ls(args):
  proc = subprocess.Popen(
    ['ls','-l', '--time-style=full-iso'] + args.args,
    stdout=subprocess.PIPE)
  regexp = re.compile(r'(.)([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*\s+[^\s]*\s+[^\s]*)\s+([^\s]*)')
  fmt = Format("TYPE PERMISSIONS LINKS OWNER      GROUP      SIZE         TIME                                  NAME")
  sys.stdout.write(fmt.render())
  for ln in proc.stdout:
    ln = trim_newline(ln.decode("utf-8"))
    if ln.startswith('total'):
      continue
    m = regexp.match(ln)
    if not m:
      continue
    fields = []
    for i in range(1, regexp.groups + 1):
      fields.append(encode_field(m.group(i)))
    sys.stdout.write(fmt.render(fields))


def uxy_cmd_ps(args):
  proc = subprocess.Popen(['ps'] + args.args, stdout=subprocess.PIPE)
  regexp = re.compile(r'\s*([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+(.*)')
  fmt = Format("PID      TTY      TIME       CMD")
  sys.stdout.write(fmt.render())
  # Ignore the header file.
  proc.stdout.readline()
  for ln in proc.stdout:
    ln = trim_newline(ln.decode("utf-8"))
    m = regexp.match(ln)
    if not m:
      continue
    fields = []
    for i in range(1, regexp.groups + 1):
      fields.append(encode_field(m.group(i)))
    sys.stdout.write(fmt.render(fields))


def uxy_cmd_trim(args):
  # Read the headers.
  s = trim_newline(sys.stdin.readline())
  fmt = Format(s)
  # Adjust the column widths so that at least quoted elipsis fits in.
  for i in range(0, len(fmt.widths) - 1):
    fmt.widths[i] = max(fmt.widths[i], 6)
  sys.stdout.write(fmt.render())
  # Process the records.
  for ln in sys.stdin:
    fields = split_fields(trim_newline(ln))
    # Get rid of unnamed fields.
    fields = fields[:len(fmt.widths)]
    # Trim the long fields. Last field is never trimmed.
    for i in range(0, len(fields) - 1):
      if len(fields[i]) > fmt.widths[i] - 1:
        if fields[i].startswith('"') and fields[i].endswith('"'):
            fields[i] = '"' + fields[i][1:fmt.widths[i] - 6] + '..."'
        else:
            fields[i] = fields[i][:fmt.widths[i] - 4] + "..."
    sys.stdout.write(fmt.render(fields))


def uxy_cmd_w(args):
  proc = subprocess.Popen(['w', '-h'] + args.args, stdout=subprocess.PIPE)
  regexp = re.compile(r'([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)\s+(.*)')
  fmt = Format("USER     TTY    FROM    LOGINAT   IDLE    JCPU    PCPU    WHAT")
  sys.stdout.write(fmt.render())
  for ln in proc.stdout:
    ln = trim_newline(ln.decode("utf-8"))
    m = regexp.match(ln)
    if not m:
      continue
    fields = []
    for i in range(1, regexp.groups + 1):
      fields.append(encode_field(m.group(i)))
    sys.stdout.write(fmt.render(fields))


def uxy_cmd_du(args):
  proc = subprocess.Popen(['du'] + args.args, stdout=subprocess.PIPE)
  regexp = re.compile(r'\s*([^\s]*)\s+(.*)')
  fmt = Format("USAGE    FILE")
  sys.stdout.write(fmt.render())
  for ln in proc.stdout:
    ln = trim_newline(ln.decode("utf-8"))
    m = regexp.match(ln)
    if not m:
      continue
    fields = []
    for i in range(1, regexp.groups + 1):
      fields.append(encode_field(m.group(i)))
    sys.stdout.write(fmt.render(fields))


def main():
  
  parser = argparse.ArgumentParser(prog="uxy",
    description="Tool to manipulate UXY data.")
  subparsers = parser.add_subparsers()

  p = subparsers.add_parser('align', help="align columns")
  p.set_defaults(func=uxy_cmd_align)

  p = subparsers.add_parser('du', help="wrapper for 'du' command")
  p.add_argument('args', nargs='*')
  p.set_defaults(func=uxy_cmd_du)

  p = subparsers.add_parser('from-csv', help="convert CSV to UXY")
  p.set_defaults(func=uxy_cmd_from_csv)

  p = subparsers.add_parser('from-json', help="convert JSON to UXY")
  p.set_defaults(func=uxy_cmd_from_json)

  p = subparsers.add_parser('from-yaml', help="convert YAML to UXY")
  p.set_defaults(func=uxy_cmd_from_yaml)

  p = subparsers.add_parser('ls', help="wrapper for 'ls' command")
  p.add_argument('args', nargs='*')
  p.set_defaults(func=uxy_cmd_ls)

  p = subparsers.add_parser('ps', help="wrapper for 'ps' command")
  p.add_argument('args', nargs='*')
  p.set_defaults(func=uxy_cmd_ps)

  p = subparsers.add_parser('re', help="convert arbitrary input to UXY")
  p.add_argument('header', help="UXY header")
  p.add_argument('regexp', help="regexp to parse the input lines")
  p.set_defaults(func=uxy_cmd_re)

  p = subparsers.add_parser('reformat', help="reformat UXY data")
  p.add_argument('header', help="new UXY header")
  p.set_defaults(func=uxy_cmd_reformat)

  p = subparsers.add_parser('to-csv', help="convert UXY to CSV")
  p.set_defaults(func=uxy_cmd_to_csv)

  p = subparsers.add_parser('to-json', help="convert UXY to JSON")
  p.set_defaults(func=uxy_cmd_to_json)

  p = subparsers.add_parser('to-yaml', help="convert UXY to YAML")
  p.set_defaults(func=uxy_cmd_to_yaml)

  p = subparsers.add_parser('trim',
    help="trim long fields so that they fit into columns")
  p.set_defaults(func=uxy_cmd_trim)

  p = subparsers.add_parser('w', help="wrapper for 'w' command")
  p.add_argument('args', nargs='*')
  p.set_defaults(func=uxy_cmd_w)

  args = parser.parse_args(sys.argv[1:])
  if len(vars(args)) == 0:
    parser.print_help()
  else:
    args.func(args)

if __name__ == "__main__":
    main()
